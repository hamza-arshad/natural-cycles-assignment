<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Payment</title>
    <link rel="stylesheet" href="/styles/payment.css" />
    <link rel="stylesheet" href="/styles/main.css" />
    <script src="https://js.braintreegateway.com/web/dropin/1.43.0/js/dropin.min.js"></script>
    <style>
      /* Add styles for error and success messages */
      #checkout-message {
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
      }
      .error-message {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }
      .success-message {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
    </style>
  </head>
  <body>
    <div id="payment-container">
      <div id="dropin-wrapper">
        <a href="/logout" class="logout-button">Logout</a>
        <h2>Complete Your Payment</h2>
        <div id="checkout-message"></div>
        <div id="dropin-container"></div>
        <form id="payment-form">
          <label for="subscription-plan">Subscription Plan</label>
          <select id="subscription-plan" name="subscriptionPlan">
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option>
          </select>

          <label for="thermometer">
            <input type="checkbox" id="thermometer" name="thermometer" />
            Include Thermometer?
          </label>

          <button type="submit" id="submit-button">Submit Payment</button>
        </form>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const paymentForm = document.getElementById('payment-form');
        const submitButton = document.getElementById('submit-button');
        const braintreeToken = '<%= braintreeToken %>';

        initializeDropinUI(paymentForm, submitButton, braintreeToken);
      });

      let dropinInstance;

      function initializeDropinUI(paymentForm, submitButton, braintreeToken) {
        braintree.dropin.create(
          {
            authorization: braintreeToken,
            container: '#dropin-container',
          },
          function (createErr, instance) {
            if (createErr) {
              console.error('Drop-in UI creation error:', createErr);
              displayMessage('error', 'Failed to initialize payment interface. Please try again later.');
              return;
            }

            dropinInstance = instance; // Store the instance for later use
            setupFormSubmission(instance, paymentForm, submitButton);
          }
        );
      }

      function setupFormSubmission(instance, paymentForm, submitButton) {
        submitButton.addEventListener('click', async function (event) {
          event.preventDefault();

          const subscriptionPlan = document.getElementById('subscription-plan').value;
          const thermometer = !!document.getElementById('thermometer').checked;

          if (!subscriptionPlan) {
            displayMessage('error', 'Please select a subscription plan.');
            return;
          }

          try {
            const { nonce } = await getPaymentMethod(instance);
            await processPayment(paymentForm, nonce, subscriptionPlan, thermometer);
          } catch (error) {
            console.error('Payment processing error:', error);
            displayMessage('error', 'There was a problem processing your payment. Please try again later.');
            paymentForm.style.display = 'block'; // Show form again in case of exception
          }
        });
      }

      function getPaymentMethod(instance) {
        return new Promise((resolve, reject) => {
          instance.requestPaymentMethod((err, payload) => {
            if (err) {
              reject(err);
            } else {
              resolve(payload);
            }
          });
        });
      }

      async function processPayment(paymentForm, nonce, subscriptionPlan, thermometer) {
        paymentForm.style.display = 'none';
        const response = await fetch('/checkout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            paymentMethodNonce: nonce,
            subscriptionPlan: subscriptionPlan,
            thermometerIncluded: thermometer,
          }),
        });

        const result = await response.json();

        if (response.ok) {
          handlePaymentResult(result);
        } else {
          displayMessage('error', 'There was a problem processing your payment. Please try again later.');
          paymentForm.style.display = 'block'; // Show form again in case of fetch error
        }
      }

      function handlePaymentResult(result) {
        if (result.success) {
          if (result.message === 'You already have an active subscription.') {
            displayMessage('success', result.message);
          } else {
            displayMessage('success', 'Your payment was processed successfully!');
            setTimeout(() => {
              window.location.href = '/status';
            }, 2000);
            teardownDropinUI();
          }
        } else {
          displayMessage('error', result.message);
          document.getElementById('payment-form').style.display = 'block'; // Show form again in case of failure
        }
      }

      function teardownDropinUI() {
        if (dropinInstance) {
          dropinInstance.teardown(teardownErr => {
            if (teardownErr) {
              console.error('Could not tear down Drop-in UI!', teardownErr);
            }
          });
        }
      }

      function displayMessage(type, message) {
        const messageElement = document.getElementById('checkout-message');
        messageElement.innerHTML = message;
        messageElement.className = type === 'error' ? 'error-message' : 'success-message';
      }
    </script>
  </body>
</html>
